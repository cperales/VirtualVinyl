name: Build and Deploy to App Runner

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: virtualvinyl
  APP_RUNNER_SERVICE: virtualvinyl-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REPOSITORY:$GITHUB_SHA ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Push Docker image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Deploy to App Runner
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
          if [ -z "$SERVICE_ARN" ]; then
            aws apprunner create-service \
              --service-name $APP_RUNNER_SERVICE \
              --source-configuration ImageRepository="{ImageIdentifier=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$GITHUB_SHA,ImageRepositoryType=ECR}" \
              --auto-deployments-enabled
          else
            aws apprunner start-deployment --service-arn $SERVICE_ARN
          fi
